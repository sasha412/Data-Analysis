using System;
using System.Collections.Generic;
using System.Linq;
using System.Data.SqlClient;
using System.Text;
using KCDS.CRC;
using System.IO;
using System.Threading;
using DistRequest.GenRequest;
using KCDS.Tools;
using System.Security.Principal;
using System.Runtime.InteropServices;
using System.Diagnostics;

namespace DistRequest
{

  /// Cyclic redundancy check (CRC) is an error-detecting code commonly used in 
  /// digital networks and storage devices to detect accidental changes to raw data

    /// <summary>
    /// Arguments for completed event
    /// </summary>
    public class CRCVerifyCompleteEventArgs : EventArgs
    {
        /// <summary>
        /// Result of CRC scan
        /// </summary>
        public bool CRCResult;
        /// <summary>
        ///Error Message from scan
        /// </summary>
        public string ErrorMsg;
       

        public CRCVerifyCompleteEventArgs(bool crcResult, string errorMsg)
        {
            CRCResult = crcResult;
            ErrorMsg = errorMsg;
          
        }
    }


    public partial class CRCVerification : System.Web.UI.UserControl
    {
        #region Events


        /// <summary>
        /// Fires when CRC Verification is complete
        /// </summary>
        public event EventHandler<CRCVerifyCompleteEventArgs> Completed;

        protected virtual void OnCompleted(CRCVerifyCompleteEventArgs e)
        {
            EventHandler<CRCVerifyCompleteEventArgs> handler = Completed;
            if (handler != null)
                handler(this, e);
        }
        #endregion

        /// <summary>
        /// Timer Tick Event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        protected void tmrProcess_Tick(object sender, EventArgs e)
        {

            try
            {

                //To display verification progress.     
               
                    lblCRCVerify.Text = Session["Progress"].ToString();
                    updtProgress.Update();
                
               

                //To raise SCCM requests. 
                
                    if (Convert.ToInt32(Session["CRCSuccess"]) == 1)
                    {

                        OnCompleted(new CRCVerifyCompleteEventArgs(Convert.ToInt32(Session["CRCSuccess"]) == 1, ""));
                    }
                
              
                    // To stop The timer after raising SCCM requests.
                    if (Convert.ToInt32(Session["CRCSuccess"]) == 1 && Convert.ToInt32(Session["SuccessReqs"]) == 1)
                    {
                        lblCRCVerify.Visible = false;
                        stopTimer();
                    }
                
               
                    // when crc verification fails. 
                    if (Convert.ToInt32(Session["CRCSuccess"]) == -1)
                    {
                        OnCompleted(new CRCVerifyCompleteEventArgs(false, Session["ErrorMessage"].ToString()));
                        stopTimer();
                    }
                
               
                    // when raising SCCM requests fails.
                    if (Convert.ToInt32(Session["SuccessReqs"]) == -1)
                    {
                       
                        stopTimer();
                    }
                
            }
            catch
            {
                stopTimer();
                OnCompleted(new CRCVerifyCompleteEventArgs(false,""));
            }
        }

        /// <summary>
        /// This class used to store the filename present in a source directory and its CRC value.
        /// </summary>
        public class crcFileName
        {
            public string crcVal { get; set; }
            public string fileName { get; set; }

            public crcFileName(string CRCval, string fName)
            {
                this.crcVal = CRCval;
                this.fileName = fName;
            }
        }
        /// <summary>
        /// This class is used to store the flag file, source directory, and the ID of a package.
        /// </summary>
        public class PackageDetails
        {
            public string pkgFlagFile { get; set; }
            public string PkgSourcedir { get; set; }
            public string pkgID { get; set; }
            public PackageDetails(string pkgflagfile, string pkgSourcedir,string PkgID)
            {
                this.pkgFlagFile = pkgflagfile;
                this.PkgSourcedir = pkgSourcedir;
                this.pkgID = PkgID;
            }
        }

        /// <summary>
        /// Method to retrieve CRC values of files from .crc file
        /// </summary>
        /// <param name="lstPkgDetails">list of package Details</param>

        /// <returns>bool</returns>      
        public bool ExistingCrc(List<PackageDetails> lstPkgDetails)
        {
                Trace.Write("get existing CRC");
           
                bool failFlag = false;
                StringBuilder strError = new StringBuilder();
               
                int packageCount = lstPkgDetails.Count;
              
                int VerifiedPkgCnt = 0;
           
            Impersonate objimp = new Impersonate();
                    string message = "";

                    if (impersonateValidUser(ref message))
                    {
                        
                        foreach (PackageDetails value in lstPkgDetails)
                        {
                            List<crcFileName> crcList = new List<crcFileName>();
                            try
                            {
                                StreamReader reader = new StreamReader(value.pkgFlagFile);

                                string lineData;
                                string[] LineSplitValues = null;
                                while ((lineData = reader.ReadLine()) != null)
                                {
                                    LineSplitValues = lineData.Split(';');
                                    crcList.Add(new crcFileName(LineSplitValues[0], LineSplitValues[2])); // Add to list.

                                }
                            }

                            catch (Exception ex)
                            {
                                Session["ErrorMessage"] = "Exception occured While reading .crc file - " + ex.Message;
                                updtProgress.Update();
                                return false;
                            }



                            if (!CalculatedCRC(crcList, value.PkgSourcedir, ref strError, ref failFlag, value.pkgID))
                            {
                                Session["ErrorMessage"] = strError.ToString();
                                return false;
                            }
                           
                            VerifiedPkgCnt++;

                            if (failFlag)
                            {
                                strError.Insert(0, "CRC verification failed at ");
                                Session["ErrorMessage"] = strError.ToString();
                                updtProgress.Update();
                                return false;
                            }

                           
                        }
                       
                        return true;
                    }
                    else
                    {
                        Trace.Write("Impersonation aborted : "+ message);
                        Session["Progress"] = "Exception occured While impersonating - " + message;
                        updtProgress.Update();
                        return false;
                    }

                   
           
        }

        /// <summary>
        /// Method to calculate CRC values of files in a directory
        /// </summary>
        /// <param name="lstExisting">list of crc values in .crc file</param>
        /// <param name="sourceDirectory">source directory</param>
        /// <returns>bool</returns>
        public bool CalculatedCRC(List<crcFileName> lstExisting, string sourceDirectory, ref StringBuilder strError, ref bool failFlag,string pkgID)
        {
            Trace.Write("get calculated CRC");

            string fullFilePath = null;
            try
            {
                string path = sourceDirectory;
                StringBuilder strMissingFileCRC = new StringBuilder();
                StringBuilder strMissingFilesFolder = new StringBuilder();
                int VerFileCnt = 0;
                
                System.IO.DirectoryInfo dir = new System.IO.DirectoryInfo(sourceDirectory);
              
                int fileCount = dir.GetFiles("*.*", SearchOption.AllDirectories).Where(g => !g.Attributes.HasFlag(FileAttributes.System)).Select(f => f).Count() - 1;
              
                if (fileCount.Equals(lstExisting.Count))
                {
                   
                    foreach (crcFileName obj in lstExisting)
                    {
                        Session["Progress"] = String.Format("Verifying Package:{0} <br/>Total files: {1} <br />files verified: {2} <br />", pkgID, fileCount, VerFileCnt);
                        VerFileCnt++;
                        fullFilePath = String.Format(@"{0}\{1}", path, obj.fileName);
                        string crcHexVal = CRC32.CalcCRCHex(fullFilePath);
                       
                        if (crcHexVal != obj.crcVal)
                        {
                            failFlag = true;
                            strError.AppendFormat("{0}<br />", fullFilePath);
                            
                        }

                    }
                    return true;
                }
                else
                {
                    getMissedFiles(lstExisting, sourceDirectory, pkgID, ref strMissingFileCRC, ref strMissingFilesFolder);                   
                    strError.Append(String.Format("{0} - The number of file entries in .crc file is not equal to the number of files in the source directory  <br/ > {1} <br/> {2} ",pkgID, strMissingFileCRC, strMissingFilesFolder));
                    failFlag = true;
                    return true;
                }
            }
            catch
            {
                failFlag = true;
                Session["Progress"] = "Verifying Package: Stopped";
               strError.Append(String.Format("File Not Found - {0}", fullFilePath));
                return false;
            }
        }

        /// <summary>
        /// Get missed files in CRC file and directory when there is a mismatch. 
        /// </summary>
        /// <param name="lstExisting">list of existing crc entries.</param>
        /// <param name="dirPath">directory path</param>
        /// <param name="packageID">Package id</param>
        /// <param name="strMissingFileCRC">Contains names of misisng files in Source directory but that are there in CRC.</param>
        /// <param name="strMissingFilesFolder">contains names of missing files in the CRC but are there in source directory.</param>
        public void getMissedFiles(List<crcFileName> lstExisting, string dirPath, string packageID, ref StringBuilder strMissingFileCRC, ref StringBuilder strMissingFilesFolder)
        {
            
            System.IO.DirectoryInfo dir = new System.IO.DirectoryInfo(dirPath);
            int lenSourceDirectory = dirPath.Length+1;
          // Contains the files from source directory.
         List<string> lstSourcefiles = (dir.GetFiles("*.*", SearchOption.AllDirectories).Where(g => !g.Attributes.HasFlag(FileAttributes.System)).ToList()).Select(r => r.FullName.Substring(lenSourceDirectory, r.FullName.Length - lenSourceDirectory)).ToList<string>();
         // contains the files from crc.
            List<string> lstCRCEntries=  lstExisting.AsEnumerable().Select(r => r.fileName).ToList();
       //contains the missing files in source directory.
         var lstMissingInCRC = lstCRCEntries.Where(g => !lstSourcefiles.Any(r => g == r) && !g.Contains(".crc"));

            foreach (var v in lstMissingInCRC)
            {
                strMissingFileCRC.Append("&nbsp;&nbsp;" + v + "<br/>");
            }
         // Contains the missing files in CRC.
            var lstMissingInFolder = lstSourcefiles.Where(g => !lstCRCEntries.Any(r => g == r) && !g.Contains(".crc"));

              foreach (var v in lstMissingInFolder)
            {
                strMissingFilesFolder.Append("&nbsp;&nbsp;" + v + "<br/>");
            }

              if (strMissingFileCRC.Length > 0)
             {
                 strMissingFileCRC.Insert(0, "<b>&nbsp;&nbsp;<u>Files missing from source folder</u>:</b> <br/>");
             }
             if (strMissingFilesFolder.Length > 0)
            {
                strMissingFilesFolder.Insert(0, "<b>&nbsp;&nbsp;<u>Files missing from crc</u>:</b> <br/>");
                
            }

        }

        /// <summary>
        /// Method to calculate CRC values of files in a directory
        /// </summary>
        /// <param name="lstPkgDetails">list of package details</param>

        public void CRCVerify(List<PackageDetails> lstPkgDetails, object WebContext)
        {
            
            System.Web.HttpContext.Current = ( System.Web.HttpContext)WebContext;
            Trace.Write("start crc verification");
            if (ExistingCrc(lstPkgDetails))
            {              
                Session["CRCSuccess"] = 1;
            }
            else
            {
                Session["CRCSuccess"] = -1;
            }          
        }
        /// <summary>
        /// Method to stop the timer.
        /// </summary>
        public void stopTimer()
        {
      
            imgProgress.Visible = false;
            updtProgress.Update();
            tmrProgress.Enabled = false;
            lblCRCVerify.Visible = false;
            Session.Remove("Progress") ;
            Session.Remove("CRCSuccess");
            Session.Remove("SuccessReqs");
            Session.Remove("ErrorMessage");
          
        }

        /// <summary>
        /// Method to start a new Thread.
        /// </summary>
        /// <param name="lstpkgDetails"></param>
        public void VerifyCrcThread(List<PackageDetails> lstpkgDetails)
        {

            lblCRCVerify.Visible = true;
             imgProgress.Visible = true;
            Session["CRCSuccess"] = 0;
            Session["SuccessReqs"] = 0;
            Session["Progress"] = "";
            Session["ErrorMessage"] = "";

            System.Web.HttpContext contxt = System.Web.HttpContext.Current;

            Thread VerifyCRCThread = new Thread(() => CRCVerify(lstpkgDetails,contxt));
            VerifyCRCThread.Start();
            tmrProgress.Enabled = true;
            updtProgress.Update();
            
        }




        /// <summary>
        /// This method is called when there is an exception while raising SCCM requests.
        /// </summary>        
        public void RequestFailed()
        {
            Session["SuccessReqs"] = -1;

        }

        /// <summary>
        /// This method is called when a SCCM request is raised successfully.
        /// </summary>
        public void SuccessRequest()
        {
            Session["SuccessReqs"] = 1 ;
        }


        [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        public static extern int DuplicateToken(IntPtr hToken, int impersonationLevel, ref IntPtr hNewToken);

        [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        public static extern bool RevertToSelf();

        [DllImport("kernel32.dll", EntryPoint = "CloseHandle", SetLastError = true, CharSet = CharSet.Auto, CallingConvention = CallingConvention.StdCall)]
        public static extern bool CloseHandle(IntPtr handle);

        public void Dispose()
        {
            if (impersonationContext != null)
            {
                undoImpersonation();
            }
        }

        [DllImport("advapi32.dll", SetLastError = true)]
        static extern bool LogonUser(
          string principal,
          string authority,
          string password,
         int logonType,
        int logonProvider,
          out IntPtr token);

        WindowsImpersonationContext impersonationContext = null;

        /// <summary>
        /// Impersonate as other user
        /// </summary>
        /// <returns></returns>
        public bool impersonateValidUser(ref string message)
        {

            string domain = null;
            string userName = null;
            string password = null;
            int LOGON32_LOGON_NEWCREDENTIALS = 9;
            int LOGON32_PROVIDER_DEFAULT = 0;
            try
            {
                SecurityAssistant.RetrieveSA("ShellAccount", ref domain, ref userName, ref password);
                Trace.Write("UserName:" + userName);
                Trace.Write("password:" + password);

                Trace.Write("Last SA error:" + SecurityAssistant.LastError);
            }

            catch (Exception ex)
            {
                Trace.Write("I error" + ex.ToString());
                message = ex.Message;
                return false;
            }
            //  Trace.Write("username", userName);
            if ((userName.Length != 0 & password.Length != 0))
            {

                WindowsIdentity tempWindowsIdentity = null;
                IntPtr token = IntPtr.Zero;
                IntPtr tokenDuplicate = IntPtr.Zero;

                if (RevertToSelf())
                {


                    if (LogonUser(userName, domain, password, LOGON32_LOGON_NEWCREDENTIALS, LOGON32_PROVIDER_DEFAULT, out token))
                    {
                        //  Trace.Write("logonUser success");
                        if (DuplicateToken(token, 2, ref tokenDuplicate) != 0)
                        {
                            // Trace.Write("duplicateToken success");
                            tempWindowsIdentity = new WindowsIdentity(tokenDuplicate);
                            impersonationContext = tempWindowsIdentity.Impersonate();
                            if (impersonationContext != null)
                            {
                                // Trace.Write("impersonation worked");
                                CloseHandle(token);
                                CloseHandle(tokenDuplicate);
                                return true;
                            }
                        }
                    }
                    else
                        return false;
                }


                //Trace.TraceWarning("impersonaltion failed");
                if (token != IntPtr.Zero)
                {
                    CloseHandle(token);
                }
                if (tokenDuplicate != IntPtr.Zero)
                {
                    CloseHandle(tokenDuplicate);
                }
            }


            // Return false if it gets to this point
            return false;
        }

        public void undoImpersonation()
        {
            if (impersonationContext != null)
            {
                impersonationContext.Dispose();
                impersonationContext.Undo();
            }
        }


      
    }
}


